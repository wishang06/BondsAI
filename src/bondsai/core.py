"""Core architecture for BondsAI - Dating App Personality Profiler."""

import asyncio
import json
import os
from datetime import datetime
from typing import List, Dict, Any, Optional
from openai import AsyncOpenAI
from .config import config


class Message:
    """Represents a chat message."""
    
    def __init__(self, role: str, content: str):
        """Initialize a message."""
        self.role = role
        self.content = content
    
    def to_dict(self) -> Dict[str, str]:
        """Convert message to dictionary format for OpenAI API."""
        return {"role": self.role, "content": self.content}


class PersonalityProfile:
    """Tracks user personality traits and preferences."""
    
    def __init__(self):
        """Initialize personality profile."""
        self.traits = {
            "communication_style": [],
            "social_preferences": [],
            "values": [],
            "interests": [],
            "lifestyle": [],
            "relationship_goals": [],
            "deal_breakers": [],
            "personality_type": "",
            "conversation_insights": []
        }
        self.conversation_count = 0
        self.topics_covered = set()
        # Basic user info - let AI fill these naturally
        self.name = ""
        self.age = ""
        self.gender = ""
        self.sexual_orientation = ""
    
    def add_insight(self, category: str, insight: str) -> None:
        """Add a personality insight."""
        if category in self.traits:
            if isinstance(self.traits[category], list):
                self.traits[category].append(insight)
            else:
                self.traits[category] = insight
    
    def set_basic_info(self, name: str = "", age: str = "", gender: str = "", sexual_orientation: str = "") -> None:
        """Set basic user information."""
        if name:
            self.name = name
        if age:
            self.age = age
        if gender:
            self.gender = gender
        if sexual_orientation:
            self.sexual_orientation = sexual_orientation
    
    def get_summary(self) -> str:
        """Generate a concise personality summary."""
        # Let the AI handle the summary generation instead of this hard-coded method
        return "Profile summary will be generated by AI at the end of conversation."
    
    def get_filename(self) -> str:
        """Generate filename based on user info."""
        # Only use name for filename, everything else goes in summary
        if self.name:
            name_part = self.name.replace(" ", "_")
        else:
            name_part = "unknown_user"
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        return f"{name_part}_{timestamp}.txt"


class DatingAssistant:
    """Main conversation manager with personality profiling for dating app."""
    
    def __init__(self):
        """Initialize the dating assistant."""
        self.client = AsyncOpenAI(api_key=config.openai_api_key)
        self.messages: List[Message] = []
        self.model = config.openai_model
        self.temperature = config.openai_temperature
        self.max_tokens = config.openai_max_tokens
        self.profile = PersonalityProfile()
        self.conversation_phase = "introduction"
        self.is_first_message = True
        self.ready_for_summary = False
        
        # Dating-specific conversation prompts
        self.system_prompt = """You are a charming, friendly, and genuinely curious AI designed to help people find meaningful connections through a dating app. Your role is to:

1. **Be warm and engaging**: Use emojis, show genuine interest, and create a comfortable atmosphere
2. **Be adaptable**: Match the vibe of the user's response and adjust your tone and language accordingly
3. **Ask thoughtful follow-up questions**: Build on their responses naturally, don't just move to the next topic
4. **Gather personality insights**: Learn about their values, communication style, interests, and relationship goals
5. **Be conversational**: Vary your language, use casual conversation, feel like talking to a real person
6. **Show active listening**: Reference what they've shared and demonstrate you're paying attention
7. **Ask 1-2 follow-up questions MAX**: Don't dwell too long on one topic - move to new areas after 1-2 exchanges (Unless there is a smooth transition to a new topic that is connected to the previous topic)
8. **Cover diverse topics quickly**: Explore different personality dimensions in each conversation
9. **Gather broad personality insights**: Learn about values, communication style, social preferences, interests, lifestyle, and relationship goals
10. **Progressive disclosure**: Start light and fun, gradually explore deeper topics
11. **Be encouraging**: Create a safe space for sharing personal information
12. **Know when to wrap up**: After 10-15 exchanges, naturally conclude the conversation and mention the personality profile

**Personality Analysis**: After each user response, analyze their communication style, tone, and personality traits. Look for:
- Communication patterns (formal/casual, detailed/brief, emotional/analytical)
- Language choices (vocabulary level, use of slang, emojis, punctuation)
- Emotional expression (enthusiastic, reserved, humorous, serious)
- Social preferences (introvert/extrovert indicators)
- Values and priorities (what they emphasize, what excites them)

**Basic Info Collection**: Naturally gather basic information throughout the conversation:
- Name (ask early, but don't force if they don't want to share)
- Age (can be approximate or range)
- Gender identity
- Sexual orientation
- Collect this information organically as part of the conversation flow

Key traits to identify quickly:
- Communication style (direct, playful, thoughtful, analytical, etc.)
- Social preferences (introvert/extrovert, group vs individual, collaborative vs independent)
- Core values and beliefs (what drives them, principles they live by)
- Interests and hobbies (creative, analytical, physical, social, etc.)
- Lifestyle preferences (routine vs spontaneity, work-life balance, etc.)
- Relationship goals and deal-breakers
- Personality type indicators (MBTI-style insights)

Complete profile summary:
- Automatically generate a complete personality profile summary based on the conversation after 10-15 exchanges
- Include all personality dimensions, their preferences, and values
- Have a detailed general description of the person's personality, then mention a few specific interests/habits within a personality category
- Frame the general description in a way similar to MBTI
- Make sure the summary is not simply repeating everything the user has said, instead, use the conversation to infer the person's personality

IMPORTANT: 
- Don't stay on one topic too long
- Cover as many personality dimensions as possible in 10-15 exchanges
- When the conversation feels complete (around 10-15 exchanges), naturally conclude and generate their personality profile

Start the first message in conversation with this exact line (in one message): "Hey there! ðŸ‘‹ I'm so excited to get to know you! What's your name and the most interesting thing that happened to you today?"

Keep responses conversational, engaging, and focused on getting to know them better. Use emojis naturally and show genuine curiosity about their responses."""
    
    def add_message(self, role: str, content: str) -> None:
        """Add a message to the conversation history."""
        message = Message(role, content)
        self.messages.append(message)
        if role == "user":
            self.profile.conversation_count += 1
    
    def clear_history(self) -> None:
        """Clear the conversation history."""
        self.messages.clear()
        self.profile = PersonalityProfile()
        self.conversation_phase = "introduction"
        self.is_first_message = True
        self.ready_for_summary = False
    
    def get_conversation_context(self) -> str:
        """Get context about the conversation for personality analysis."""
        if self.profile.conversation_count <= 3:
            return "early_conversation"
        elif self.profile.conversation_count <= 10:
            return "building_connection"
        else:
            return "deep_dive"
    
    async def save_profile_to_file(self) -> str:
        """Save the personality profile to a text file."""
        try:
            # Ensure user_info directory exists
            user_info_dir = "user_info"
            if not os.path.exists(user_info_dir):
                os.makedirs(user_info_dir)
            
            # Generate filename
            filename = self.profile.get_filename()
            filepath = os.path.join(user_info_dir, filename)
            
            # Generate AI-powered personality profile
            profile_prompt = f"""Based on this conversation, create a comprehensive personality profile for the user. 

Conversation:
{chr(10).join([f"{msg.role.upper()}: {msg.content}" for msg in self.messages])}

Please create a detailed personality profile that includes:
1. Basic information (name, age, gender, sexual orientation if mentioned)
2. Communication style and personality traits
3. Values and beliefs
4. Interests and hobbies
5. Lifestyle preferences
6. Social preferences (introvert/extrovert, etc.)
7. Relationship goals and deal-breakers
8. Overall personality assessment (similar to MBTI style)

Format it nicely with clear sections and make it comprehensive but concise."""

            try:
                response = await self.client.chat.completions.create(
                    model=self.model,
                    messages=[{"role": "user", "content": profile_prompt}],
                    temperature=0.7,
                    max_tokens=800,
                )
                
                ai_profile = response.choices[0].message.content
            except Exception as e:
                ai_profile = f"Error generating AI profile: {str(e)}\n\nFallback: Basic conversation summary"
            
            # Create profile content
            profile_content = f"""BONDSAI PERSONALITY PROFILE
Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Conversation Length: {self.profile.conversation_count} exchanges

{ai_profile}

---
Full Conversation History:
"""
            
            # Add conversation history
            for i, message in enumerate(self.messages, 1):
                profile_content += f"\n{i}. {message.role.upper()}: {message.content}\n"
            
            # Write to file
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(profile_content)
            
            return filepath
            
        except Exception as e:
            return f"Error saving profile: {str(e)}"
    
    async def chat(self, user_input: str = None) -> str:
        """Send a message to the AI and get a response."""
        
        # If this is the first message, initiate the conversation
        if self.is_first_message:
            self.is_first_message = False
            initial_message = "Hey there! ðŸ‘‹ I'm so excited to get to know you! What's your name and the most interesting thing that happened to you today?"
            self.add_message("assistant", initial_message)
            return initial_message
        
        # Add user message to history
        if user_input:
            self.add_message("user", user_input)
            
            # Try to extract name from user input (simple extraction)
            if not self.profile.name and self.profile.conversation_count <= 2:
                user_input_lower = user_input.lower()
                if "i'm" in user_input_lower or "i am" in user_input_lower or "my name is" in user_input_lower:
                    words = user_input.split()
                    for i, word in enumerate(words):
                        if word.lower() in ["i'm", "am", "name", "is"] and i + 1 < len(words):
                            potential_name = words[i + 1].strip(".,!?")
                            if len(potential_name) > 1 and potential_name.isalpha():
                                self.profile.set_basic_info(name=potential_name)
                                break
        
        # Check if conversation is ready to end (10-15 exchanges)
        if self.profile.conversation_count >= 10 and not self.ready_for_summary:
            self.ready_for_summary = True
            # Save profile to file
            filepath = await self.save_profile_to_file()
            ending_message = f"Thank you so much for sharing with me! ðŸ’• I've learned so much about you and created a personality profile. It's been saved to: {filepath}\n\nI hope this helps you find meaningful connections! ðŸŒŸ"
            self.add_message("assistant", ending_message)
            return ending_message
        
        # Prepare messages for OpenAI API with system prompt
        messages = [{"role": "system", "content": self.system_prompt}]
        messages.extend([msg.to_dict() for msg in self.messages])
        
        try:
            # Make API call to OpenAI
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=self.temperature,
                max_tokens=self.max_tokens,
            )
            
            # Extract AI response
            ai_response = response.choices[0].message.content
            
            # Add AI response to history
            self.add_message("assistant", ai_response)
            
            return ai_response
            
        except Exception as e:
            error_msg = f"Error communicating with OpenAI: {str(e)}"
            self.add_message("assistant", error_msg)
            return error_msg
    
    def get_conversation_summary(self) -> Dict[str, Any]:
        """Get a summary of the current conversation and personality profile."""
        return {
            "message_count": self.profile.conversation_count,
            "model": self.model,
            "temperature": self.temperature,
            "max_tokens": self.max_tokens,
            "conversation_phase": self.conversation_phase,
            "personality_summary": self.profile.get_summary(),
        }
    
    def get_personality_profile(self) -> str:
        """Get the complete personality profile summary."""
        return self.profile.get_summary()


# Alias for backward compatibility
Assistant = DatingAssistant
